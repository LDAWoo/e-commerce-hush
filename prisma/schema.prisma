datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    CUSTOMER
    SUPPORT_STAFF
    ADMIN
    SUPPLIER
    ORDER_MANAGER
    WAREHOUSE_STAFF
    CONTENT_MANAGER
    FINANCIAL_MANAGER
}

model User {
    id           String         @id @default(uuid())
    name         String
    avatarUrl    String         @db.Text
    email        String         @unique
    passwordHash String?        @default("")
    country      String?        @default("")
    phone        String?        @default("")
    address      String?        @default("")
    isActive     Boolean        @default(false)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    role         Role           @default(CUSTOMER)
    Permissions  Permissions[]
    Notification Notification[]
    Orders       Order[]
    Cart         Cart?
    cartId       String?
}

model Permissions {
    id     String  @id @default(uuid())
    email  String
    User   User    @relation(fields: [email], references: [email], onDelete: Cascade)
    access Boolean

    @@index([email])
}

model Notification {
    id           String @id @default(uuid())
    notification String

    read Boolean? @default(false)

    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([productId])
}

model Collection {
    id          String    @id @default(uuid())
    name        String
    description String?
    Products    Product[] @relation("CollectionProducts")
}

model Product {
    id              String           @id @default(uuid())
    name            String
    description     String
    price           Float
    ProductImages   ProductImage[]
    ProductVariants ProductVariant[]
    Collections     Collection[]     @relation("CollectionProducts")
    OrderItem       OrderItem[]
    CartItem        CartItem[]
    Notification    Notification[]

    Category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    @@index([categoryId])
}

model Category {
    id          String    @id @default(uuid())
    name        String
    description String?
    Products    Product[]
}

model ProductImage {
    id        String  @id @default(uuid())
    imageUrl  String
    Product   Product @relation(fields: [productId], references: [id])
    productId String

    @@index([productId])
}

model ProductVariant {
    id        String  @id @default(uuid())
    Product   Product @relation(fields: [productId], references: [id])
    productId String
    Size      Size    @relation(fields: [sizeId], references: [id])
    sizeId    String
    Color     Color   @relation(fields: [colorId], references: [id])
    colorId   String

    @@index([productId])
    @@index([sizeId])
    @@index([colorId])
}

model Size {
    id              String           @id @default(uuid())
    name            String
    ProductVariants ProductVariant[]
}

model Color {
    id             String           @id @default(uuid())
    name           String
    ProductVariant ProductVariant[]
}

model Order {
    id          String      @id @default(uuid())
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    totalAmount Float
    status      String
    OrderItems  OrderItem[]

    @@index([userId])
}

model OrderItem {
    id        String  @id @default(uuid())
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    Product   Product @relation(fields: [productId], references: [id])
    productId String
    quantity  Int
    price     Float

    @@index([productId])
    @@index([orderId])
}

model Cart {
    id        String     @id @default(uuid())
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    CartItems CartItem[]

    @@index([userId])
}

model CartItem {
    id        String  @id @default(uuid())
    Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId    String
    Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    price     Float

    @@index([cartId])
    @@index([productId])
}
